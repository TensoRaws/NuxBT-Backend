// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/TensoRaws/NuxBT-Backend/dal/model"
)

func newTorrent(db *gorm.DB, opts ...gen.DOOption) torrent {
	_torrent := torrent{}

	_torrent.torrentDo.UseDB(db, opts...)
	_torrent.torrentDo.UseModel(&model.Torrent{})

	tableName := _torrent.torrentDo.TableName()
	_torrent.ALL = field.NewAsterisk(tableName)
	_torrent.TorrentID = field.NewInt32(tableName, "torrent_id")
	_torrent.Hash = field.NewString(tableName, "hash")
	_torrent.UploaderID = field.NewInt32(tableName, "uploader_id")
	_torrent.Official = field.NewBool(tableName, "official")
	_torrent.Size = field.NewInt64(tableName, "size")
	_torrent.Status = field.NewString(tableName, "status")
	_torrent.Title = field.NewString(tableName, "title")
	_torrent.Subtitle = field.NewString(tableName, "subtitle")
	_torrent.Essay = field.NewString(tableName, "essay")
	_torrent.Description = field.NewString(tableName, "description")
	_torrent.Genre = field.NewString(tableName, "genre")
	_torrent.AnidbID = field.NewInt32(tableName, "anidb_id")
	_torrent.Img = field.NewString(tableName, "img")
	_torrent.Resolution = field.NewString(tableName, "resolution")
	_torrent.VideoCodec = field.NewString(tableName, "video_codec")
	_torrent.AudioCodec = field.NewString(tableName, "audio_codec")
	_torrent.Language = field.NewString(tableName, "language")
	_torrent.CreatedAt = field.NewTime(tableName, "created_at")
	_torrent.UpdatedAt = field.NewTime(tableName, "updated_at")
	_torrent.DeletedAt = field.NewField(tableName, "deleted_at")

	_torrent.fillFieldMap()

	return _torrent
}

type torrent struct {
	torrentDo

	ALL         field.Asterisk
	TorrentID   field.Int32
	Hash        field.String
	UploaderID  field.Int32
	Official    field.Bool
	Size        field.Int64
	Status      field.String
	Title       field.String
	Subtitle    field.String
	Essay       field.String
	Description field.String
	Genre       field.String
	AnidbID     field.Int32
	Img         field.String
	Resolution  field.String
	VideoCodec  field.String
	AudioCodec  field.String
	Language    field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (t torrent) Table(newTableName string) *torrent {
	t.torrentDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t torrent) As(alias string) *torrent {
	t.torrentDo.DO = *(t.torrentDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *torrent) updateTableName(table string) *torrent {
	t.ALL = field.NewAsterisk(table)
	t.TorrentID = field.NewInt32(table, "torrent_id")
	t.Hash = field.NewString(table, "hash")
	t.UploaderID = field.NewInt32(table, "uploader_id")
	t.Official = field.NewBool(table, "official")
	t.Size = field.NewInt64(table, "size")
	t.Status = field.NewString(table, "status")
	t.Title = field.NewString(table, "title")
	t.Subtitle = field.NewString(table, "subtitle")
	t.Essay = field.NewString(table, "essay")
	t.Description = field.NewString(table, "description")
	t.Genre = field.NewString(table, "genre")
	t.AnidbID = field.NewInt32(table, "anidb_id")
	t.Img = field.NewString(table, "img")
	t.Resolution = field.NewString(table, "resolution")
	t.VideoCodec = field.NewString(table, "video_codec")
	t.AudioCodec = field.NewString(table, "audio_codec")
	t.Language = field.NewString(table, "language")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *torrent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *torrent) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 20)
	t.fieldMap["torrent_id"] = t.TorrentID
	t.fieldMap["hash"] = t.Hash
	t.fieldMap["uploader_id"] = t.UploaderID
	t.fieldMap["official"] = t.Official
	t.fieldMap["size"] = t.Size
	t.fieldMap["status"] = t.Status
	t.fieldMap["title"] = t.Title
	t.fieldMap["subtitle"] = t.Subtitle
	t.fieldMap["essay"] = t.Essay
	t.fieldMap["description"] = t.Description
	t.fieldMap["genre"] = t.Genre
	t.fieldMap["anidb_id"] = t.AnidbID
	t.fieldMap["img"] = t.Img
	t.fieldMap["resolution"] = t.Resolution
	t.fieldMap["video_codec"] = t.VideoCodec
	t.fieldMap["audio_codec"] = t.AudioCodec
	t.fieldMap["language"] = t.Language
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t torrent) clone(db *gorm.DB) torrent {
	t.torrentDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t torrent) replaceDB(db *gorm.DB) torrent {
	t.torrentDo.ReplaceDB(db)
	return t
}

type torrentDo struct{ gen.DO }

type ITorrentDo interface {
	gen.SubQuery
	Debug() ITorrentDo
	WithContext(ctx context.Context) ITorrentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITorrentDo
	WriteDB() ITorrentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITorrentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITorrentDo
	Not(conds ...gen.Condition) ITorrentDo
	Or(conds ...gen.Condition) ITorrentDo
	Select(conds ...field.Expr) ITorrentDo
	Where(conds ...gen.Condition) ITorrentDo
	Order(conds ...field.Expr) ITorrentDo
	Distinct(cols ...field.Expr) ITorrentDo
	Omit(cols ...field.Expr) ITorrentDo
	Join(table schema.Tabler, on ...field.Expr) ITorrentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITorrentDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITorrentDo
	Group(cols ...field.Expr) ITorrentDo
	Having(conds ...gen.Condition) ITorrentDo
	Limit(limit int) ITorrentDo
	Offset(offset int) ITorrentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITorrentDo
	Unscoped() ITorrentDo
	Create(values ...*model.Torrent) error
	CreateInBatches(values []*model.Torrent, batchSize int) error
	Save(values ...*model.Torrent) error
	First() (*model.Torrent, error)
	Take() (*model.Torrent, error)
	Last() (*model.Torrent, error)
	Find() ([]*model.Torrent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Torrent, err error)
	FindInBatches(result *[]*model.Torrent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Torrent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITorrentDo
	Assign(attrs ...field.AssignExpr) ITorrentDo
	Joins(fields ...field.RelationField) ITorrentDo
	Preload(fields ...field.RelationField) ITorrentDo
	FirstOrInit() (*model.Torrent, error)
	FirstOrCreate() (*model.Torrent, error)
	FindByPage(offset int, limit int) (result []*model.Torrent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITorrentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t torrentDo) Debug() ITorrentDo {
	return t.withDO(t.DO.Debug())
}

func (t torrentDo) WithContext(ctx context.Context) ITorrentDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t torrentDo) ReadDB() ITorrentDo {
	return t.Clauses(dbresolver.Read)
}

func (t torrentDo) WriteDB() ITorrentDo {
	return t.Clauses(dbresolver.Write)
}

func (t torrentDo) Session(config *gorm.Session) ITorrentDo {
	return t.withDO(t.DO.Session(config))
}

func (t torrentDo) Clauses(conds ...clause.Expression) ITorrentDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t torrentDo) Returning(value interface{}, columns ...string) ITorrentDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t torrentDo) Not(conds ...gen.Condition) ITorrentDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t torrentDo) Or(conds ...gen.Condition) ITorrentDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t torrentDo) Select(conds ...field.Expr) ITorrentDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t torrentDo) Where(conds ...gen.Condition) ITorrentDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t torrentDo) Order(conds ...field.Expr) ITorrentDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t torrentDo) Distinct(cols ...field.Expr) ITorrentDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t torrentDo) Omit(cols ...field.Expr) ITorrentDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t torrentDo) Join(table schema.Tabler, on ...field.Expr) ITorrentDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t torrentDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITorrentDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t torrentDo) RightJoin(table schema.Tabler, on ...field.Expr) ITorrentDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t torrentDo) Group(cols ...field.Expr) ITorrentDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t torrentDo) Having(conds ...gen.Condition) ITorrentDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t torrentDo) Limit(limit int) ITorrentDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t torrentDo) Offset(offset int) ITorrentDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t torrentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITorrentDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t torrentDo) Unscoped() ITorrentDo {
	return t.withDO(t.DO.Unscoped())
}

func (t torrentDo) Create(values ...*model.Torrent) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t torrentDo) CreateInBatches(values []*model.Torrent, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t torrentDo) Save(values ...*model.Torrent) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t torrentDo) First() (*model.Torrent, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Torrent), nil
	}
}

func (t torrentDo) Take() (*model.Torrent, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Torrent), nil
	}
}

func (t torrentDo) Last() (*model.Torrent, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Torrent), nil
	}
}

func (t torrentDo) Find() ([]*model.Torrent, error) {
	result, err := t.DO.Find()
	return result.([]*model.Torrent), err
}

func (t torrentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Torrent, err error) {
	buf := make([]*model.Torrent, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t torrentDo) FindInBatches(result *[]*model.Torrent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t torrentDo) Attrs(attrs ...field.AssignExpr) ITorrentDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t torrentDo) Assign(attrs ...field.AssignExpr) ITorrentDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t torrentDo) Joins(fields ...field.RelationField) ITorrentDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t torrentDo) Preload(fields ...field.RelationField) ITorrentDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t torrentDo) FirstOrInit() (*model.Torrent, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Torrent), nil
	}
}

func (t torrentDo) FirstOrCreate() (*model.Torrent, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Torrent), nil
	}
}

func (t torrentDo) FindByPage(offset int, limit int) (result []*model.Torrent, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t torrentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t torrentDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t torrentDo) Delete(models ...*model.Torrent) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *torrentDo) withDO(do gen.Dao) *torrentDo {
	t.DO = *do.(*gen.DO)
	return t
}
